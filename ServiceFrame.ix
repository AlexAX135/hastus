att omit_null_values
basetype time { mask "0hh'mm" }
basetype date { mask "!yyyymmdd|xxxx-xx-xx" }

definitions MainDefinitions {
	code
	DEFINE md_operatorId { "HTM" }
	DEFINE md_operatorName { "HTM" }
	DEFINE md_frameVersion { v_source + "_" + Format(datetoday(),"!yyyymmdd|xxxx-xx-xx") }
	DEFINE md_trp_valid CLASS trip { trp_duration > 0h00 }
	DEFINE md_rte_service_mode CLASS route {
		IF rte_service_mode = 0 /* BUS */ THEN "bus"
		ELSE IF rte_service_mode = 1 /* TRAMWAY */ THEN "tram"
		ELSE IF rte_service_mode = 2 /* METRO */ THEN "metro" 
		ELSE "rail"
		}
	end
}

var part1 {type 'string'}
var v_source { type 'string' assign 'IF p_CalendarId<>NULL THEN p_CalendarId ELSE IF p_SchedUnit<>NULL THEN p_SchedUnit '}
var v_tpat_link_index 					{ type 'integer' assign '0' }

array_var av_printed_itn {
	key_part 'itn_stop_start'
	key_part 'itn_stop_end'
	type 'boolean' assign 'FALSE'
}

file serviceframe {
	name '"NeTEx_ServiceFrame.xml"'

	xmlelement PublicationDelivery {
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value '"1.0"' }

		xmlelement PublicationTimestamp { value 'DateToday()' }
		xmlelement ParticipantRef { value '"NDOV"' }

		xmlelement dataObjects {
			xmlelement CompositeFrame {
				xmlelement FrameDefaults {
					xmlelement DefaultDataSourceRef {
						xmlattribute ref { value '"BISON:DataSource:" + md_operatorId' }
						xmlattribute version { value '"any"' }
					}
				}

				xmlelement frames {
					xmlelement ResourceFrame {
						xmlelement DataSource {
							xmlattribute id { value '"BISON:DataSource:" + md_operatorId' }
							xmlattribute version { value '"any"' }
							xmlelement ShortName { value 'md_operatorId' }
							xmlelement Description { value 'md_operatorName' }
						}
						
						# responsibilitySets
						
						xmlelement organisations {
							xmlelement Operator {
								xmlattribute id { value '"BISON:Operator:" + md_operatorId' }
								xmlattribute version { value '"any"' }
								xmlelement Name  { value 'md_operatorName' }
								xmlelement ShortName { value 'md_operatorId' }
								
								# TODO members
								# xmlelement parts {
								#	from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip).Get(trip_stop)
								#	foreach district {
								#	}
								# }
							}
							
							
							foreach trip_stop {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip).Get(trip_stop)'
								condition 'trp_duration > 0h00 AND trp_is_in_service'
								unique_on 'tstp_district'

								xmlelement Authority {						
									xmlattribute id { value '"BISON:Authority:" + tstp_district' }
									xmlattribute version { value '"any"' }
									xmlelement Name { value 'DefNull(tstp_district.dst_description,tstp_district)' }
								}
							}
						}
						
						xmlelement typesOfValue {
							xmlelement ValueSet {
								xmlelement Name { value '"Zone types"'}
								xmlelement values {
									xmlelement TypeOfZone {
										xmlattribute id { value '"BISON:TypeOfZone:Zone"' }
										xmlattribute version { value '"any"' }
										xmlelement Name { value '"Nationale Zone"' }
									}
									
									# Arriva TariffStop via stp_short_name
									#
									# xmlelement TypeOfZone {
									#	xmlattribute id { value '"ARR:TypeOfZone:TariffStop"' }
									#	xmlattribute version { value '"any"' }
									#	xmlelement Name { value '"Tariefhalte"' }
									# }
								}
							}
						}
					}

					xmlelement ServiceFrame {
						xmlelement directions {
							foreach trip {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip)'
								unique_on 'tpat_direction'
								condition 'tpat_direction <> ""'

								xmlelement Direction {
									xmlattribute id			{ value 'md_operatorId + ":Direction:" + tpat_direction' }
									xmlelement Name			{ value 'tpat_direction' mask "CHO_TITLE" }
									xmlelement ShortName	{ value 'tpat_direction' mask "CHO_NAME"}
									xmlattribute version	{ value '"any"' }
								}
							} # foreach trip
						}
						
						xmlelement routePoints {
							foreach trip_pattern_point { 	
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
								condition 'tpatpt_itinerary <> NULL'
								unique_on 'stp_identifier'
								xmlelement RoutePoint {	
									xmlattribute id 				{ value 'md_operatorId + ":RoutePoint:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Location {
										xmlelement gml:pos {
											xmlattribute srsName 			{ value '"EPSG:28992"' }
											value 'Trim(Format(Object(stop,stp_identifier).loca_x_coord, "zzzzzn")) + " " + Trim(Format(Object(stop,stp_identifier).loca_y_coord, "zzzzzn" ))'
		
											# Hastus 2016 and higher
 											# value 'Trim(Format(Object(stop_location,stp_locations).loca_x_coord, "zzzzzn" )) + " " + Trim(Format(Object(stop_location,stp_locations).loca_y_coord, "zzzzzn" ))'											
											} # xmlelement gml:pos 
										} # xmlelement Location
									} # xmlelement RoutePoint
								} # foreach trip_pattern_point
							} # xmlelement routePoints
							
							
						# TODO: werkt nog niet bij HTM
						xmlelement routeLinks {
							foreach itinerary {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip).Get(trip_pattern).Get(itinerary)'
								condition 'not av_printed_itn AND itn_stop_start <> itn_stop_end'
								sort_by rteVersion
								{ 
									criteria rte_version
									criteria trp_route
									criteria trp_via_variant
									criteria trp_direction
								}

								xmlelement RouteLink
								{
									xmlattribute "id"				{ value 'md_operatorId + ":RouteLink:" +itn_stop_start+"-"+itn_stop_end' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement "Name"				{ value 'itn_stop_start+"-"+itn_stop_end' }
									xmlelement "Distance"				{ value 'itn_calc_distance' } # TODO: controleren
									xmlelement gml:LineString {
										xmlattribute id 			{ value 'md_operatorId + "_LineString_" +itn_stop_start+"-"+itn_stop_end' }
										xmlattribute srsName 			{ value '"EPSG:28992"' }
										xmlelement gml:posList 		{ value 'Concat(Trim(Format(itn_coord,"nnnnnn")), " ")' }
									}
									xmlelement "FromPointRef"		{ value 'md_operatorId + ":RoutePoint:" +itn_stop_start' }
									xmlelement "ToPointRef"			{ value 'md_operatorId + ":RoutePoint:" +itn_stop_end' }
								}
								array_var av_printed_itn {assign 'TRUE'} 					
								
							} # foreach itinerary
						}
						
						xmlelement routes {
							foreach trip_pattern {
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern)'
								sort_by TripSort {
									criteria tpat_route
									criteria tpat_external_id
								} # sort_by TripSort
								unique_on 'tpat_route, tpat_external_id'
								condition 'md_trp_valid AND trp_is_in_service'								
								var v_tpat_link_index 		{assign '0'}	
							
								xmlelement Route {
									xmlattribute id 				{ value 'md_operatorId + ":Route:" + Trim(tpat_route) + ":" + tpat_external_id' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement LineRef {
										xmlattribute ref 			{ value 'md_operatorId + ":Line:" + Trim(tpat_route)' }
										xmlattribute version 		{ value 'md_frameVersion' }
									} # xmlelement LineRef
									xmlelement pointsInSequence {
										foreach trip_pattern_point {
											var v_tpat_link_index {assign ' v_tpat_link_index + 1 '}										
											xmlelement PointOnRoute {
												xmlattribute id 			{ value 'md_operatorId + ":PointOnRoute:" + Trim(tpat_route) + ":" + tpat_external_id + ":" + v_tpat_link_index' }
												xmlattribute version 		{ value 'md_frameVersion' }
												xmlattribute order 			{ value 'v_tpat_link_index' }
												xmlelement RoutePointRef {
													xmlattribute ref { value 'md_operatorId + ":RoutePoint:" + stp_identifier ' }
													xmlattribute version { value 'md_frameVersion' }
												} # xmlelement RoutePointRef							
											} # xmlelement PointOnRoute
										} # foreach trip_pattern_point
									} # xmlelement pointsInSequence
								} # xmlelement Route
							}	
						}
						
						xmlelement lines {
							foreach trip {
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								condition 'trp_is_public'
								unique_on 'trp_route'
								sort_by 'trp_route'
								xmlelement Line {
									xmlattribute id 			{ value 'md_operatorId + ":Line:" + Trim(trp_route)' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement keyList {
										xmlelement KeyValue {
											xmlelement Key 			{ value '"VeTagLineNumber"' }
											xmlelement Value 		{ value 'Trim(Object(route,trp_route).rte_pub_id)' }
										} # xmlelement KeyValue
										xmlelement KeyValue {
											xmlelement Key 			{ value '"LinePlanningNumber"' }
											xmlelement Value 		{ value 'Trim(Object(route,trp_route).rte_identifier)' }
										} # xmlelement KeyValue										
									} # xmlelement keyList
									xmlelement Name 				{ value 'Object(route,trp_route).rte_description' }
									xmlelement TransportMode 		{ value 'md_rte_service_mode' }
									xmlelement PublicCode 			{ value 'Trim(Object(route,trp_route).rte_pub_id)' }
									
									foreach trip_stop {
										unique_on 'tstp_district'
										xmlelement AuthorityRef	{
											xmlattribute ref 			{ value '"BISON:Authority:" + tstp_district' }
											xmlattribute version		{ value '"any"' }
										} # xmlelement AuthorityRef
									}

									xmlelement Monitored 			{ value 'IF trp_is_in_service THEN "true" ELSE "false"' }
									
									# TODO: AccessibilityAssessment per line.
									#
									# xmlelement AccessibilityAssessment {
									#	xmlattribute id 			{ value 'md_operatorId + ":AccessibilityAssessment:" + trp_route' }
									#	xmlattribute version 		{ value 'md_frameVersion' }
									#	xmlelement MobilityImpairedAccess { value 'false' }
									#	xmlelement suitabilities {
									#		xmlelement Suitability {
									#			xmlattribute id { value '"BISON:Suitability:WheelchairNotSuitable"' }
									#			xmlattribute version { value '"any"' }
									#			xmlelement MobilityNeed { value '"wheelchair"' }
									#			xmlelement Suitable { value '"notSuitable"' }
									#		}
									#	}
									# } # xmlelement AccessibilityAssessment
								} # xmlelement Line									
							} # foreach trip
						} # xmlelement lines
						
						xmlelement destinationDisplays {
							foreach veh_disp_code {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip_pattern).Get(veh_disp_code)'
								unique_on 'vdc_id'
								xmlelement DestinationDisplay {
									xmlattribute id			{ value 'md_operatorId + ":DestinationDisplay:" + vdc_id' }
									xmlattribute version	{ value 'md_frameVersion' }
									xmlelement Name			{ value 'vdc_message3' }
									xmlelement ShortName	{ value 'vdc_message1' }
								}
							} # foreach veh_disp_code
						}
						
						xmlelement scheduledStopPoints {
							foreach stop {
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								unique_on 'stp_identifier'
								condition 'stp_is_public'
								sort_by 'stp_identifier'
								xmlelement ScheduledStopPoint {
									xmlattribute id 				{ value 'md_operatorId + ":StopPoint:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement keyList {
										xmlelement KeyValue {
											xmlelement Key 			{ value '"UserStopCode"' }
											xmlelement Value 		{ value 'stp_identifier' }
										} # xmlelement KeyValue
									} # xmlelement keyList
									xmlelement Name 				{ value 'stp_description' }
									xmlelement projections	{										
										xmlelement PointProjection {	
											xmlelement ProjectToPointRef {
												xmlattribute nameOfRefClass 		{ value '"RoutePoint"' }
												xmlattribute ref 					{ value 'md_operatorId + ":RoutePoint:" + stp_identifier' }
												xmlattribute version 				{ value 'md_frameVersion' }
											}
										}
									} # xmlelement projections
									xmlelement tariffZones {
										xmlelement TariffZoneRef {
											xmlattribute ref { value '"NL:TariffZone:" + stp_zone' }
											xmlattribute version { value '"any"' }
										}
										
										# Arriva TariffZone
										# xmlelement TariffZoneRef {
										#	xmlattribute ref { value '"ARR:TariffZone:" + stp_short_name' }
										#	xmlattribute version { value 'md_frameVersion' }
										# }
									}
									
									xmlelement ShortName			{ value 'stp_identifier' }
									xmlelement ForAlighting 		{ value 'IF stp_allow_debarking THEN "true" ELSE "false"' }
									xmlelement ForBoarding 			{ value 'IF stp_allow_boarding THEN   "true" ELSE "false"' }								
								} # xmlelement ScheduledStopPoint
							} # foreach stop
						}
						
						xmlelement tariffZones {
							foreach stop {
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								condition 'stp_zone <> null'
								unique_on 'stp_zone'
								
								xmlelement TariffZone {
									xmlattribute id             {value '"NL:TariffZone:" + stp_zone' }
									xmlattribute version        {value '"any"'}
									xmlelement Name             {value 'DefNull(zon_description,stp_zone)' }
									xmlelement ShortName        {value 'stp_zone' }
									xmlelement types {
										xmlelement TypeOfZoneRef {
											xmlattribute ref 	{ value '"BISON:TypeOfZone:Zone"' }
											xmlattribute version { value '"any"' }
										}
									}								
								}
							}
							
							# Arriva TariffStops via stp_short_name
							# 
							# foreach stop {
							#	from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
							#	condition 'stp_short_name <> null'
							#	unique_on 'stp_short_name'
							#
							#	xmlelement TariffZone {
							#		xmlattribute id             {value '"ARR:TariffZone:" + stp_short_name' }
							#		xmlattribute version        {value 'md_frameVersion'}
							#		xmlelement Name             {value 'stp_short_name' }
							#		xmlelement ShortName        {value 'stp_short_name' }
							#		xmlelement types {
							#			xmlelement TypeOfZoneRef {
							#				xmlattribute ref 	{ value '"ARR:TypeOfZone:TariffStop"' }
							#				xmlattribute version { value '"any"' }
							#			}
							#		}								
							#	}
							# }
						}
						
						# stopAssignments
						# timingPoints
						# timingLinks
						# journeyPatterns
						# timeDemandTypes
						
					}
				}
			}
		}
	}
}
