att omit_null_values
basetype time { mask "0hh'mm" }
basetype date { mask "!yyyymmdd|xxxx-xx-xx" }

definitions MainDefinitions {
	code
	DEFINE md_operatorId { "HTM" }
	DEFINE md_operatorName { "HTM" }
	DEFINE md_frameVersion { v_source + "_" + Format(datetoday(),"!yyyymmdd|xxxx-xx-xx") }
	end
}

var part1 {type 'string'}
var v_source { type 'string' assign 'IF p_CalendarId<>NULL THEN p_CalendarId ELSE IF p_SchedUnit<>NULL THEN p_SchedUnit '}

file serviceframe {
	name '"NeTEx_ServiceFrame.xml"'

	xmlelement PublicationDelivery {
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value '"1.0"' }

		xmlelement PublicationTimestamp { value 'DateToday()' }
		xmlelement ParticipantRef { value '"NDOV"' }

		xmlelement dataObjects {
			xmlelement CompositeFrame {
				xmlelement FrameDefaults {
					xmlelement DefaultDataSourceRef {
						xmlattribute ref { value '"BISON:DataSource:" + md_operatorId' }
						xmlattribute version { value '"any"' }
					}
				}

				xmlelement frames {
					xmlelement ResourceFrame {
						xmlelement DataSource {
							xmlattribute id { value '"BISON:DataSource:" + md_operatorId' }
							xmlattribute version { value '"any"' }
							xmlelement ShortName { value 'md_operatorId' }
							xmlelement Description { value 'md_operatorName' }
						}
						
						# responsibilitySets
						
						xmlelement organisations {
							xmlelement Operator {
								xmlattribute id { value '"BISON:Operator:" + md_operatorId' }
								xmlattribute version { value '"any"' }
								xmlelement Name  { value 'md_operatorName' }
								xmlelement ShortName { value 'md_operatorId' }
								
								# TODO members
								# xmlelement parts {
								#	from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip).Get(trip_stop)
								#	foreach district {
								#	}
								# }
							}
							
							
							foreach trip_stop {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip).Get(trip_stop)'
								condition 'trp_duration > 0h00 AND trp_is_in_service'
								unique_on 'tstp_district'

								xmlelement Authority {						
									xmlattribute id { value '"BISON:Authority:" + tstp_district' }
									xmlattribute version { value '"any"' }
									xmlelement Name { value 'DefNull(tstp_district.dst_description,tstp_district)' }
								}
							}
						}
						
						xmlelement typesOfValue {
							xmlelement ValueSet {
								xmlelement Name { value '"Zone types"'}
								xmlelement values {
									xmlelement TypeOfZone {
										xmlattribute id { value '"BISON:TypeOfZone:Zone"' }
										xmlattribute version { value '"any"' }
										xmlelement Name { value '"Nationale Zone"' }
									}
									
									# Arriva TariffStop via stp_short_name
									#
									# xmlelement TypeOfZone {
									#	xmlattribute id { value '"ARR:TypeOfZone:TariffStop"' }
									#	xmlattribute version { value '"any"' }
									#	xmlelement Name { value '"Tariefhalte"' }
									# }
								}
							}
						}
					}

					xmlelement ServiceFrame {
						xmlelement directions {
							foreach trip {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(block).Get(trip)'
								unique_on 'tpat_direction'
								condition 'tpat_direction <> ""'

								xmlelement Direction {
									xmlattribute id			{ value 'md_operatorId + ":Direction:" + tpat_direction' }
									xmlelement Name			{ value 'tpat_direction' mask "CHO_TITLE" }
									xmlelement ShortName	{ value 'tpat_direction' mask "CHO_NAME"}
									xmlattribute version	{ value '"any"' }
								}
							} # foreach trip
						}
						
						# routePoints
						# routeLinks
						# routes
						# lines
						
						xmlelement destinationDisplays {
							foreach veh_disp_code {
								from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip_pattern).Get(veh_disp_code)'
								unique_on 'vdc_id'
								xmlelement DestinationDisplay {
									xmlattribute id			{ value 'md_operatorId + ":DestinationDisplay:" + vdc_id' }
									xmlattribute version	{ value 'md_frameVersion' }
									xmlelement Name			{ value 'vdc_message3' }
									xmlelement ShortName	{ value 'vdc_message1' }
								}
							} # foreach veh_disp_code
						}
						
						# scheduledStopPoints
						
						xmlelement tariffZones {
							foreach stop {
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								condition 'stp_zone <> null'
								unique_on 'stp_zone'
								
								xmlelement TariffZone {
									xmlattribute id             {value '"NL:TariffZone:" + stp_zone' }
									xmlattribute version        {value 'md_frameVersion'}
									xmlelement Name             {value 'DefNull(zon_description,stp_zone)' }
									xmlelement ShortName        {value 'stp_zone' }
									xmlelement types {
										xmlelement TypeOfZoneRef {
											xmlattribute ref 	{ value '"BISON:TypeOfZone:Zone"' }
											xmlattribute version { value '"any"' }
										}
									}								
								}
							}
							
							# Arriva TariffStops via stp_short_name
							# 
							# foreach stop {
							#	from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
							#	condition 'stp_short_name <> null'
							#	unique_on 'stp_short_name'
							#
							#	xmlelement TariffZone {
							#		xmlattribute id             {value '"ARR:TariffZone:" + stp_short_name' }
							#		xmlattribute version        {value 'md_frameVersion'}
							#		xmlelement Name             {value 'stp_short_name' }
							#		xmlelement ShortName        {value 'stp_short_name' }
							#		xmlelement types {
							#			xmlelement TypeOfZoneRef {
							#				xmlattribute ref 	{ value '"ARR:TypeOfZone:TariffStop"' }
							#				xmlattribute version { value '"any"' }
							#			}
							#		}								
							#	}
							# }
						}
						
						# stopAssignments
						# timingPoints
						# timingLinks
						# journeyPatterns
						# timeDemandTypes
						
					}
				}
			}
		}
	}
}
