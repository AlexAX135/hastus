xmlelement timingLinks {
	foreach trip_pattern_point {
		from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
		condition 'Prev().stp_identifier <> "" AND stp_identifier <> "" AND Prev().stp_identifier <> stp_identifier'
		unique_on 'Prev().stp_identifier, stp_identifier '
		sort_by TripPatternStopSort {
			criteria Prev().stp_identifier
			criteria stp_identifier
			criteria tpatpt_distance
		} # sort_by TripPatternStopSort
		xmlelement TimingLink {
			xmlattribute id 						{ value 'md_operatorId + ":TimingLink:" + Prev().stp_identifier + "-" + stp_identifier' }
			xmlattribute version 					{ value 'md_frameVersion' }
			xmlattribute responsibilitySetRef 		{ value '"BISON:ResponsibilitySet:"+md_link_authority' }
			xmlelement Distance 					{ value 'Trim(Format(tpatpt_distance,"zzzzz.n"))' }
			xmlelement FromPointRef {
				xmlattribute ref {
					condition 'Prev().stp_is_public'
					value 'md_operatorId + ":ScheduledStopPoint:" + Prev().stp_identifier'
				}
				xmlattribute ref {
					condition 'NOT Prev().stp_is_public'
					value 'md_operatorId + ":TimingPoint:" + Prev().stp_identifier'
				}
				xmlattribute version 				{ value 'md_frameVersion' }
			} # xmlelement FromPointRef

			xmlelement ToPointRef {
				condition 'stp_is_public'
				xmlattribute ref {
					condition 'stp_is_public'
					value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier'
				}
				xmlattribute ref {
					condition 'NOT stp_is_public'
					value 'md_operatorId + ":TimingPoint:" + stp_identifier'
				}
				xmlattribute version 				{ value 'md_frameVersion' }
			} # xmlelement ToPointRef

		} # xmlelement TimingLink
	} # foreach trip_pattern_point
} # xmlelement timingLinks
