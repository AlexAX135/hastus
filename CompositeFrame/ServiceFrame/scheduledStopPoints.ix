# foreach run_time_pattern_stp {
#	from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_sel).Get(run_time_pattern).Get(run_time_pattern_stp)'
#	condition 'stp_identifier <> "" AND stp_is_public AND tpat_id = ""'
#	unique_on 'stp_identifier'
#	array_var av_used_scheduledstoppoints { assign 'true' }
# }

foreach trip_pattern_point {
	from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_sel).Get(trip_pattern).get(trip_pattern_point)'
	condition 'stp_identifier <> "" AND stp_is_public'
	unique_on 'stp_identifier'
	array_var av_used_scheduledstoppoints { assign 'true' }
}

xmlelement scheduledStopPoints {
	foreach stop {
		from 'GetAll(stop, av_used_scheduledstoppoints)'
		unique_on 'stp_identifier'
		sort_by 'stp_identifier'
		
		xmlelement ScheduledStopPoint {
			xmlattribute id 				{ value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier' }
			xmlattribute version 			{ value 'md_any' }
			xmlelement Name 				{ value 'stp_description' }

			xmlelement Location {
				xmlelement gml:pos {
					# xmlattribute srsName 			{ value '"EPSG:28992"' }
					value 'Trim(Format(Object(stop_location,stp_locations).loca_x_coord, "zzzzzn" )) + " " + Trim(Format(Object(stop_location,stp_locations).loca_y_coord, "zzzzzn" ))'
				} # xmlelement gml:pos
			} # xmlelement Location

			xmlelement projections	{
				xmlelement PointProjection {
					xmlattribute id 				{ value 'md_operatorId + ":PointProjection:" + stp_identifier' }
					xmlattribute version 			{ value 'md_frameVersion' }

					xmlelement ProjectToPointRef {
						xmlattribute nameOfRefClass 		{ value '"RoutePoint"' }
						xmlattribute ref 					{ value 'md_operatorId + ":RoutePoint:" + stp_identifier' }
						xmlattribute version 				{ value 'md_frameVersion' }
					}
				}
			} # xmlelement projections
			
			xmlelement stopAreas {
				condition 'plc_identifier <> ""'
				xmlelement StopAreaRef {
					xmlattribute ref 				{ value 'md_operatorId + ":StopArea:" + plc_identifier' }
					xmlattribute version 			{ value 'md_any' }
				}
			}

			xmlelement tariffZones {
				condition 'stp_zone <> ""' # Hack
				xmlelement TariffZoneRef {
					xmlattribute ref { value '"NL:TariffZone:" + stp_zone' }
					xmlattribute version { value '"any"' }
				}

				# Arriva TariffZone
				# xmlelement TariffZoneRef {
				#	condition 'stp_short_name <> ""' # Hack 
				#	xmlattribute ref { value '"ARR:TariffZone:" + stp_short_name' }
				#	xmlattribute version { value 'md_any' }
				# }
			}

			# Arriva
			# xmlelement ShortName			{ value 'stp_short_desc' }
			# xmlelement ShortStopCode		{ value 'stp_short_name' }

			xmlelement PrivateCode {
				xmlattribute type	 		{ value '"UserStopCode"' }
				value 'md_UserStopCode'
			} # xmlelement PrivateCode

			xmlelement ForAlighting 		{ value 'IF stp_allow_debarking THEN "true" ELSE "false"' }
			xmlelement ForBoarding 			{ value 'IF stp_allow_boarding THEN "true" ELSE "false"' }
		} # xmlelement ScheduledStopPoint
	} # foreach trip_pattern_point
}
