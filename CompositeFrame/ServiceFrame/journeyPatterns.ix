# TODO: Can't this be done far more easy?

xmlelement journeyPatterns {
	foreach trip_pattern {
		from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip, md_trp_sel).Get(trip_pattern)'
		sort_by TripSort {
			criteria vsc_int_id
			criteria tpat_route
			criteria tpat_id
		}
		unique_on 'vsc_int_id, tpat_route, tpat_id'
		condition 'trp_is_in_service'

		xmlelement ServiceJourneyPattern {
			xmlattribute id 			{ value 'md_operatorId + ":ServiceJourneyPattern:" + vsc_int_id + ":" + Trim(tpat_route) + ":" + tpat_id' }
			xmlattribute version 		{ value 'md_frameVersion' }

			# xmlelement Name { value '"Patroon voor lijn " + rte_pub_id' }
			xmlelement ShortName { value 'tpat_id' }

			# xmlelement Distance { value 'Trim(Format(tpat_distance,"zzzzz.n"))' }
			xmlelement Distance { 
				condition 'tpat_distance <> NULL'
				value 'tpat_distance / 10'
			}

			xmlelement RouteRef {
				xmlattribute ref		{ value 'md_operatorId + ":Route:" + vsc_int_id + ":" + Trim(tpat_route) + ":" + tpat_id' }
				xmlattribute version 	{ value 'md_frameVersion' }
			}

			xmlelement DirectionRef {
				condition 'tpat_direction <> ""'
				xmlattribute ref 		{ value 'md_operatorId + ":Direction:" + tpat_direction' }
				xmlattribute version	{ value '"any"' }
			}

			xmlelement DestinationDisplayRef {
				condition 'tpat_veh_display <> ""'
				xmlattribute ref		{ value 'md_operatorId + ":DestinationDisplay:" + Object(veh_disp_code, tpat_veh_display).vdc_id' }
				xmlattribute version 	{ value 'md_frameVersion' }
			} # xmlelement DestinationDisplayRef

			xmlelement pointsInSequence {
				foreach trip_pattern_point {
					unique_on 'stp_identifier, Next().stp_identifier, tpatpt_position'

					xmlelement StopPointInJourneyPattern {
						condition 'stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":StopPointInJourneyPattern:" + vsc_int_id + ":" + Trim(tpat_route) + ":" + tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement ScheduledStopPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_any' }
						} # xmlelement ScheduledStopPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
						xmlelement IsWaitPoint {							
							condition 'md_timingpoint'
							value 'true'
						} # IsWaitPoint
						xmlelement DestinationDisplayRef {
							condition 'tpatpt_veh_display_code <> "" AND tpatpt_veh_display_code <> tpat_veh_display'
							xmlattribute ref		{ value 'md_operatorId + ":DestinationDisplay:" + Object(veh_disp_code, tpatpt_veh_display_code).vdc_id' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement DestinationDisplayRef
					} # xmlelement StopPointInJourneyPattern
					xmlelement TimingPointInJourneyPattern {
						condition 'NOT stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":TimingPointInJourneyPattern:" + vsc_int_id + ":" + Trim(tpat_route) + ":" + tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement TimingPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":TimingPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement TimingPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement TimingPointInJourneyPattern
				} # foreach trip_pattern_point
			} # xmlelement pointsInSequence
		} # xmlelement ServiceJourneyPattern
	} # foreach trip_pattern

	foreach trip {
		from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip, md_trp_sel)'
		condition 'NOT trp_is_in_service'
		unique_on 'vsc_int_id, rpat_route, rpat_identifier'

		xmlelement DeadRunJourneyPattern {
			xmlattribute id 			{ value 'md_operatorId + ":DeadRunJourneyPattern:" + vsc_int_id + ":" + Trim(rpat_route) + ":" + rpat_identifier' }
			xmlattribute version 		{ value 'md_frameVersion' }

			xmlelement ShortName { value 'rpat_identifier' }

			xmlelement Distance { 
				condition 'false'
				value '0'
			}

			xmlelement RouteRef {
				condition 'false'
				xmlattribute ref		{ value '""' }
				xmlattribute version 	{ value '""' }
			}

			xmlelement DirectionRef {
				condition 'false'
				xmlattribute ref 		{ value '""' }
				xmlattribute version	{ value '""' }
			}

			xmlelement pointsInSequence {
				foreach run_time_pattern_stp {
					from 'Get(run_time_pattern).Get(run_time_pattern_stp)'
					unique_on 'rpst_stp_pos, stp_identifier, Next().stp_identifier'

					xmlelement StopPointInJourneyPattern {
						condition 'stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":StopPointInJourneyPattern:" + vsc_int_id + ":" + Trim(rpat_route) + ":" + rpat_identifier + ":" + (rpst_stp_pos + 1)' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value '(rpst_stp_pos + 1)' }
						xmlelement ScheduledStopPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_any' }
						} # xmlelement ScheduledStopPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement StopPointInJourneyPattern
					xmlelement TimingPointInJourneyPattern {
						condition 'NOT stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":TimingPointInJourneyPattern:" + vsc_int_id + ":" + Trim(rpat_route) + ":" + rpat_identifier + "-" + (rpst_stp_pos + 1)' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value '(rpst_stp_pos + 1)' }
						xmlelement TimingPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":TimingPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement TimingPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement TimingPointInJourneyPattern
				} # foreach trip_pattern_point
			} # xmlelement pointsInSequence
		} # xmlelement DeadRunPattern
	} # foreach trip
} # xmlelement journeyPatterns