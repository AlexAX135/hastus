# TODO: Can't this be done far more easy?

xmlelement journeyPatterns {
	foreach trip_pattern {
		from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip, md_trp_valid).Get(trip_pattern)'
		sort_by TripSort {
			criteria tpat_route
			criteria md_tpat_id
		}
		unique_on 'tpat_route, md_tpat_id'
		condition 'trp_is_in_service'

		xmlelement ServiceJourneyPattern {
			xmlattribute id 			{ value 'md_operatorId + ":ServiceJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id' }
			xmlattribute version 		{ value 'md_frameVersion' }

			# xmlelement Name { value '"Patroon voor lijn " + rte_pub_id' }
			xmlelement ShortName { value 'md_tpat_id' }

			# xmlelement Distance { value 'Trim(Format(tpat_distance,"zzzzz.n"))' }
			xmlelement Distance { 
				condition 'tpat_distance <> NULL'
				value 'tpat_distance * 100'
			}

			xmlelement RouteRef {
				xmlattribute ref		{ value 'md_operatorId + ":Route:" + Trim(tpat_route) + ":" + md_tpat_id' }
				xmlattribute version 	{ value 'md_frameVersion' }
			}

			xmlelement DirectionRef {
				condition 'tpat_direction <> ""'
				xmlattribute ref 		{ value 'md_operatorId + ":Direction:" + tpat_direction' }
				xmlattribute version	{ value '"any"' }
			}

			xmlelement DestinationDisplayRef {
				condition 'tpat_veh_display <> ""'
				xmlattribute ref		{ value 'md_operatorId + ":DestinationDisplay:" + Object(veh_disp_code, tpat_veh_display).vdc_id' }
				xmlattribute version 	{ value 'md_frameVersion' }
			} # xmlelement DestinationDisplayRef

			xmlelement pointsInSequence {
				foreach trip_pattern_point {
					# from 'Get(trip_pattern, tpat_route 				 = THIS trip_pattern[2].tpat_route AND
					#						md_tpat_id         		 = THIS trip_pattern[2].md_tpat_id    AND
					#						tpat_direction           = THIS trip_pattern[2].tpat_direction).Get(trip_pattern_point)'
					# condition ' stp_identifier <> Next().stp_identifier '
					unique_on ' tpatpt_position, stp_identifier, Next().stp_identifier '

					xmlelement StopPointInJourneyPattern {
						condition 'stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":StopPointInJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement ScheduledStopPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement ScheduledStopPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
						xmlelement IsWaitPoint {							
							condition 'md_timingpoint'
							value 'true'
						} # IsWaitPoint
						xmlelement DestinationDisplayRef {
							condition 'tpatpt_veh_display_code <> "" AND tpatpt_veh_display_code <> tpat_veh_display'
							xmlattribute ref		{ value 'md_operatorId + ":DestinationDisplay:" + Object(veh_disp_code, tpatpt_veh_display_code).vdc_id' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement DestinationDisplayRef
					} # xmlelement StopPointInJourneyPattern
					xmlelement TimingPointInJourneyPattern {
						condition 'NOT stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":TimingPointInJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement TimingPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":TimingPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement TimingPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement TimingPointInJourneyPattern
				} # foreach trip_pattern_point
			} # xmlelement pointsInSequence
		} # xmlelement ServiceJourneyPattern
	} # foreach trip_pattern

	foreach trip_pattern {
		from 'GetAll(vehicle_schedule, vsc_is_current).Get(trip, md_trp_valid).Get(trip_pattern)'
		sort_by TripSort {
			criteria tpat_route
			criteria md_tpat_id
		}
		unique_on 'tpat_route, md_tpat_id'
		condition 'NOT trp_is_in_service'

		xmlelement DeadRunJourneyPattern {
			xmlattribute id 			{ value 'md_operatorId + ":DeadRunJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id' }
			xmlattribute version 		{ value 'md_frameVersion' }

			# xmlelement Name { value '"Deadrunpatroon voor lijn " + rte_pub_id' }
			xmlelement ShortName { value 'md_tpat_id' }

			# xmlelement Distance { value 'Trim(Format(tpat_distance,"zzzzz.n"))' }
			xmlelement Distance { 
				condition 'tpat_distance <> NULL'
				value 'tpat_distance * 100'
			}
			
			xmlelement RouteRef {
				condition 'Trim(tpat_route) <> ""'
				xmlattribute ref		{ value 'md_operatorId + ":Route:" + Trim(tpat_route) + ":" + md_tpat_id' }
				xmlattribute version 	{ value 'md_frameVersion' }
			}

			xmlelement DirectionRef {
				xmlattribute ref 		{ value 'md_operatorId + ":Direction:" + tpat_direction' }
				xmlattribute version	{ value '"any"' }
			}

			xmlelement pointsInSequence {
				foreach trip_pattern_point {
					# from 'Get(trip_pattern, tpat_route 				 = THIS trip_pattern[2].tpat_route AND
					# 						md_tpat_id         		 = THIS trip_pattern[2].md_tpat_id    AND
					# 						tpat_direction           = THIS trip_pattern[2].tpat_direction).Get(trip_pattern_point)'
					# condition ' stp_identifier <> Next().stp_identifier '
					unique_on ' tpatpt_position, stp_identifier, Next().stp_identifier '

					var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
					xmlelement StopPointInJourneyPattern {
						condition 'stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":StopPointInJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement ScheduledStopPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":ScheduledStopPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement ScheduledStopPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement StopPointInJourneyPattern
					xmlelement TimingPointInJourneyPattern {
						condition 'NOT stp_is_public'
						xmlattribute id 			{ value 'md_operatorId + ":TimingPointInJourneyPattern:" + Trim(tpat_route) + ":" + md_tpat_id + "-" + tpatpt_position' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlattribute order 			{ value 'tpatpt_position' }
						xmlelement TimingPointRef {
							xmlattribute ref 		{ value 'md_operatorId + ":TimingPoint:" + stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement TimingPointRef
						xmlelement OnwardTimingLinkRef {
							condition 'Next().stp_identifier <> ""'
							xmlattribute ref 		{ value 'md_operatorId + ":TimingLink:" + stp_identifier + "-" + Next().stp_identifier' }
							xmlattribute version 	{ value 'md_frameVersion' }
						} # xmlelement OnwardTimingLinkRef
					} # xmlelement TimingPointInJourneyPattern
				} # foreach trip_pattern_point
			} # xmlelement pointsInSequence
		} # xmlelement DeadRunPattern
	} # foreach trip_pattern
} # xmlelement journeyPatterns
